package nalabs.handlers;

import static se.addiva.nalabs.NalabsLib.getHelloWorld;
import static se.addiva.nalabs.NalabsLib.sqrt;

import java.lang.foreign.MemoryAddress;
import java.util.*;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.emf.ecore.*;
import org.eclipse.emf.common.util.EList;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.handlers.HandlerUtil;
import org.polarsys.capella.core.model.handler.helpers.CapellaAdapterHelper;
import org.polarsys.kitalpha.vp.requirements.Requirements.*;
import org.polarsys.kitalpha.vp.requirements.Requirements.Module;

public class NalabsHandler extends AbstractHandler {

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		
		// Get Requirements from selection
		IStructuredSelection selection = (IStructuredSelection) HandlerUtil.getCurrentSelection(event);
		Collection<Requirement> requirements = getRequirements(selection);
		
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);

		MessageDialog.openInformation(
				window.getShell(),
				"NALABS",
				requirements.toString());

		
		// Retrieve Text content from Requirements.
		for(Requirement r : requirements) {
			String rText = r.getReqIFText();
			
			MessageDialog.openInformation(
					window.getShell(),
					"ReqIFText",
					rText);

			EList<Attribute> attributes = r.getOwnedAttributes();
			Collection<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();
						
			for(Attribute a : attributes) {
				AttributeDefinition ad = a.getDefinition();
				attributeDefinitions.add(ad);
				
				if(ad.getReqIFIdentifier() == "NALABS") {
					// How to get/set attribute value?
					MessageDialog.openInformation(
							window.getShell(),
							"Contents",
							a.eContents().toString());					
				}
			}
						
			MessageDialog.openInformation(
					window.getShell(),
					"Attributes",
					attributes.toString() + "\n\n" + attributeDefinitions.toString());
			
			}
		
		
		/*
		MemoryAddress result = getHelloWorld();
        String greeting = result.getUtf8String(0);
		double y = sqrt(4);
		*/ 
        
		/*
		MessageDialog.openInformation(
				window.getShell(),
				"NALABS",
				greeting + "\n" + y);
		*/
		return null;
	}
	
	/*
	 * Collects Requirements from selection, also getting from Modules if selected. 
	 * */
	protected Collection<Requirement> getRequirements(IStructuredSelection selection){
	    Collection<EObject> objects = CapellaAdapterHelper.resolveSemanticObjects(selection.toList());

		Collection<Requirement> reqs = new ArrayList<Requirement>();
		
		for (EObject object : objects) {
			if (object instanceof Requirement) {
				reqs.add((Requirement)object);
	        }
	        else if(object instanceof Module) {
	        	EList<Requirement> ownedRequirements = ((Module)object).getOwnedRequirements();
	        	reqs.addAll(ownedRequirements);
	        }
		}
		
		return reqs;
	}
}
