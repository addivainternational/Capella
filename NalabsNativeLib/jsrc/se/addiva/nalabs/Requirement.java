// Generated by jextract

package se.addiva.nalabs;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Requirement {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("Text"),
        Constants$root.C_POINTER$LAYOUT.withName("Id"),
        Constants$root.C_LONG$LAYOUT.withName("AriScore"),
        MemoryLayout.paddingLayout(32)
    ).withName("Requirement");
    public static MemoryLayout $LAYOUT() {
        return Requirement.$struct$LAYOUT;
    }
    static final VarHandle Text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Text"));
    public static VarHandle Text$VH() {
        return Requirement.Text$VH;
    }
    public static MemoryAddress Text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)Requirement.Text$VH.get(seg);
    }
    public static void Text$set( MemorySegment seg, MemoryAddress x) {
        Requirement.Text$VH.set(seg, x);
    }
    public static MemoryAddress Text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)Requirement.Text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Text$set(MemorySegment seg, long index, MemoryAddress x) {
        Requirement.Text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Id"));
    public static VarHandle Id$VH() {
        return Requirement.Id$VH;
    }
    public static MemoryAddress Id$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)Requirement.Id$VH.get(seg);
    }
    public static void Id$set( MemorySegment seg, MemoryAddress x) {
        Requirement.Id$VH.set(seg, x);
    }
    public static MemoryAddress Id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)Requirement.Id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Id$set(MemorySegment seg, long index, MemoryAddress x) {
        Requirement.Id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AriScore$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AriScore"));
    public static VarHandle AriScore$VH() {
        return Requirement.AriScore$VH;
    }
    public static int AriScore$get(MemorySegment seg) {
        return (int)Requirement.AriScore$VH.get(seg);
    }
    public static void AriScore$set( MemorySegment seg, int x) {
        Requirement.AriScore$VH.set(seg, x);
    }
    public static int AriScore$get(MemorySegment seg, long index) {
        return (int)Requirement.AriScore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AriScore$set(MemorySegment seg, long index, int x) {
        Requirement.AriScore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


