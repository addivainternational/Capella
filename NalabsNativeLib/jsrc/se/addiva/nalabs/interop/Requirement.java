// Generated by jextract

package se.addiva.nalabs.interop;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Requirement {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("id"),
        Constants$root.C_POINTER$LAYOUT.withName("text"),
        Constants$root.C_DOUBLE$LAYOUT.withName("ariScore"),
        Constants$root.C_LONG$LAYOUT.withName("conjunctions"),
        Constants$root.C_LONG$LAYOUT.withName("vaguePhrases"),
        Constants$root.C_LONG$LAYOUT.withName("optionality"),
        Constants$root.C_LONG$LAYOUT.withName("subjectivity"),
        Constants$root.C_LONG$LAYOUT.withName("references"),
        Constants$root.C_LONG$LAYOUT.withName("weakness"),
        Constants$root.C_LONG$LAYOUT.withName("imperatives"),
        Constants$root.C_LONG$LAYOUT.withName("continuances"),
        Constants$root.C_LONG$LAYOUT.withName("imperatives2"),
        Constants$root.C_LONG$LAYOUT.withName("references2")
    ).withName("Requirement");
    public static MemoryLayout $LAYOUT() {
        return Requirement.$struct$LAYOUT;
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return Requirement.id$VH;
    }
    public static MemoryAddress id$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)Requirement.id$VH.get(seg);
    }
    public static void id$set( MemorySegment seg, MemoryAddress x) {
        Requirement.id$VH.set(seg, x);
    }
    public static MemoryAddress id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)Requirement.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, MemoryAddress x) {
        Requirement.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text"));
    public static VarHandle text$VH() {
        return Requirement.text$VH;
    }
    public static MemoryAddress text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)Requirement.text$VH.get(seg);
    }
    public static void text$set( MemorySegment seg, MemoryAddress x) {
        Requirement.text$VH.set(seg, x);
    }
    public static MemoryAddress text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)Requirement.text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text$set(MemorySegment seg, long index, MemoryAddress x) {
        Requirement.text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ariScore$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ariScore"));
    public static VarHandle ariScore$VH() {
        return Requirement.ariScore$VH;
    }
    public static double ariScore$get(MemorySegment seg) {
        return (double)Requirement.ariScore$VH.get(seg);
    }
    public static void ariScore$set( MemorySegment seg, double x) {
        Requirement.ariScore$VH.set(seg, x);
    }
    public static double ariScore$get(MemorySegment seg, long index) {
        return (double)Requirement.ariScore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ariScore$set(MemorySegment seg, long index, double x) {
        Requirement.ariScore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle conjunctions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("conjunctions"));
    public static VarHandle conjunctions$VH() {
        return Requirement.conjunctions$VH;
    }
    public static int conjunctions$get(MemorySegment seg) {
        return (int)Requirement.conjunctions$VH.get(seg);
    }
    public static void conjunctions$set( MemorySegment seg, int x) {
        Requirement.conjunctions$VH.set(seg, x);
    }
    public static int conjunctions$get(MemorySegment seg, long index) {
        return (int)Requirement.conjunctions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void conjunctions$set(MemorySegment seg, long index, int x) {
        Requirement.conjunctions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vaguePhrases$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vaguePhrases"));
    public static VarHandle vaguePhrases$VH() {
        return Requirement.vaguePhrases$VH;
    }
    public static int vaguePhrases$get(MemorySegment seg) {
        return (int)Requirement.vaguePhrases$VH.get(seg);
    }
    public static void vaguePhrases$set( MemorySegment seg, int x) {
        Requirement.vaguePhrases$VH.set(seg, x);
    }
    public static int vaguePhrases$get(MemorySegment seg, long index) {
        return (int)Requirement.vaguePhrases$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vaguePhrases$set(MemorySegment seg, long index, int x) {
        Requirement.vaguePhrases$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle optionality$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("optionality"));
    public static VarHandle optionality$VH() {
        return Requirement.optionality$VH;
    }
    public static int optionality$get(MemorySegment seg) {
        return (int)Requirement.optionality$VH.get(seg);
    }
    public static void optionality$set( MemorySegment seg, int x) {
        Requirement.optionality$VH.set(seg, x);
    }
    public static int optionality$get(MemorySegment seg, long index) {
        return (int)Requirement.optionality$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void optionality$set(MemorySegment seg, long index, int x) {
        Requirement.optionality$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle subjectivity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("subjectivity"));
    public static VarHandle subjectivity$VH() {
        return Requirement.subjectivity$VH;
    }
    public static int subjectivity$get(MemorySegment seg) {
        return (int)Requirement.subjectivity$VH.get(seg);
    }
    public static void subjectivity$set( MemorySegment seg, int x) {
        Requirement.subjectivity$VH.set(seg, x);
    }
    public static int subjectivity$get(MemorySegment seg, long index) {
        return (int)Requirement.subjectivity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void subjectivity$set(MemorySegment seg, long index, int x) {
        Requirement.subjectivity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle references$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("references"));
    public static VarHandle references$VH() {
        return Requirement.references$VH;
    }
    public static int references$get(MemorySegment seg) {
        return (int)Requirement.references$VH.get(seg);
    }
    public static void references$set( MemorySegment seg, int x) {
        Requirement.references$VH.set(seg, x);
    }
    public static int references$get(MemorySegment seg, long index) {
        return (int)Requirement.references$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void references$set(MemorySegment seg, long index, int x) {
        Requirement.references$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle weakness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("weakness"));
    public static VarHandle weakness$VH() {
        return Requirement.weakness$VH;
    }
    public static int weakness$get(MemorySegment seg) {
        return (int)Requirement.weakness$VH.get(seg);
    }
    public static void weakness$set( MemorySegment seg, int x) {
        Requirement.weakness$VH.set(seg, x);
    }
    public static int weakness$get(MemorySegment seg, long index) {
        return (int)Requirement.weakness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void weakness$set(MemorySegment seg, long index, int x) {
        Requirement.weakness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle imperatives$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("imperatives"));
    public static VarHandle imperatives$VH() {
        return Requirement.imperatives$VH;
    }
    public static int imperatives$get(MemorySegment seg) {
        return (int)Requirement.imperatives$VH.get(seg);
    }
    public static void imperatives$set( MemorySegment seg, int x) {
        Requirement.imperatives$VH.set(seg, x);
    }
    public static int imperatives$get(MemorySegment seg, long index) {
        return (int)Requirement.imperatives$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void imperatives$set(MemorySegment seg, long index, int x) {
        Requirement.imperatives$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle continuances$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("continuances"));
    public static VarHandle continuances$VH() {
        return Requirement.continuances$VH;
    }
    public static int continuances$get(MemorySegment seg) {
        return (int)Requirement.continuances$VH.get(seg);
    }
    public static void continuances$set( MemorySegment seg, int x) {
        Requirement.continuances$VH.set(seg, x);
    }
    public static int continuances$get(MemorySegment seg, long index) {
        return (int)Requirement.continuances$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void continuances$set(MemorySegment seg, long index, int x) {
        Requirement.continuances$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle imperatives2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("imperatives2"));
    public static VarHandle imperatives2$VH() {
        return Requirement.imperatives2$VH;
    }
    public static int imperatives2$get(MemorySegment seg) {
        return (int)Requirement.imperatives2$VH.get(seg);
    }
    public static void imperatives2$set( MemorySegment seg, int x) {
        Requirement.imperatives2$VH.set(seg, x);
    }
    public static int imperatives2$get(MemorySegment seg, long index) {
        return (int)Requirement.imperatives2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void imperatives2$set(MemorySegment seg, long index, int x) {
        Requirement.imperatives2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle references2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("references2"));
    public static VarHandle references2$VH() {
        return Requirement.references2$VH;
    }
    public static int references2$get(MemorySegment seg) {
        return (int)Requirement.references2$VH.get(seg);
    }
    public static void references2$set( MemorySegment seg, int x) {
        Requirement.references2$VH.set(seg, x);
    }
    public static int references2$get(MemorySegment seg, long index) {
        return (int)Requirement.references2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void references2$set(MemorySegment seg, long index, int x) {
        Requirement.references2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


